from __future__ import annotations

import io
import zipfile
from datetime import datetime, timedelta
from typing import Dict, List

from telegram import (
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    InputFile,
    ReplyKeyboardMarkup,
    Update,
)
from telegram.ext import (
    Application,
    CallbackQueryHandler,
    CommandHandler,
    ContextTypes,
    MessageHandler,
    filters,
)

import database
from states import (
    add_details_handler,
    add_dish_handler,
    delete_dish_handler,
    find_by_ingredients_handler,
    import_handler,
    plan_handler,
    scale_dish_handler,
    send_reminder_job,
    edit_dish_handler,
)
from utils import (
    build_main_keyboard_layout,
    calculate_date_range,
    format_dish_card,
    format_plan_entries,
    format_recent_actions,
    format_shareable_recipe,
    format_shopping_items,
    format_statistics,
)


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_id = str(update.effective_user.id)
    summary = await database.get_dashboard_summary(user_id)
    recent = await database.get_recent_actions(user_id)
    keyboard = ReplyKeyboardMarkup(
        build_main_keyboard_layout(summary),
        resize_keyboard=True,
    )
    message_lines = [
        "–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É –≤–µ—Å—Ç–∏ –º–µ–Ω—é, –ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –ø–∏—Ç–∞–Ω–∏–µ –∏ —Å–æ—Å—Ç–∞–≤–ª—è—Ç—å —Å–ø–∏—Å–∫–∏ –ø–æ–∫—É–ø–æ–∫.",
        f"–í—Å–µ–≥–æ –±–ª—é–¥: {summary.get('total_dishes', 0)}",
        f"–ò–∑–±—Ä–∞–Ω–Ω—ã—Ö –±–ª—é–¥: {summary.get('favorite_count', 0)}",
        f"–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø—Ä–∏—ë–º–æ–≤ –ø–∏—â–∏: {summary.get('upcoming', 0)}",
    ]
    recent_text = format_recent_actions(recent)
    if recent_text:
        message_lines.append("\n" + recent_text)
    await update.message.reply_text("\n".join(message_lines), reply_markup=keyboard)


async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    help_text = (
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/start ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
        "/add_dish ‚Äî –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ –±–ª—é–¥–æ\n"
        "/menu ‚Äî —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –±–ª—é–¥\n"
        "/view <–Ω–∞–∑–≤–∞–Ω–∏–µ> ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É –±–ª—é–¥–∞\n"
        "/plan ‚Äî –¥–æ–±–∞–≤–∏—Ç—å –±–ª—é–¥–æ –≤ –ø–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è\n"
        "/shopping ‚Äî —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫\n"
        "/favorites ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –∏–∑–±—Ä–∞–Ω–Ω—ã–µ –±–ª—é–¥–∞\n"
        "/stats ‚Äî —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è\n"
        "/find ‚Äî –ø–æ–∏—Å–∫ –±–ª—é–¥ –ø–æ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞–º\n"
        "/import ‚Äî –∏–º–ø–æ—Ä—Ç –±–ª—é–¥ –∏–∑ CSV\n"
        "/export ‚Äî —ç–∫—Å–ø–æ—Ä—Ç –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö\n"
        "/cancel ‚Äî –æ—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â–∏–π –¥–∏–∞–ª–æ–≥"
    )
    await update.message.reply_text(help_text)


async def list_dishes(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    dishes = await database.list_dishes()
    message = update.effective_message
    if not dishes:
        await message.reply_text("–ú–µ–Ω—é –ø—É—Å—Ç–æ–µ. –î–æ–±–∞–≤—å—Ç–µ –±–ª—é–¥–æ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã '–î–æ–±–∞–≤–∏—Ç—å –±–ª—é–¥–æ'.")
        return
    dish_names = "\n".join(f"‚Ä¢ {dish['name']}" for dish in dishes)
    buttons: List[List[InlineKeyboardButton]] = []
    for dish in dishes[:30]:  # –æ–≥—Ä–∞–Ω–∏—á–∏–º—Å—è 30 –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –∫–æ–º–ø–∞–∫—Ç–Ω–æ—Å—Ç–∏
        buttons.append([InlineKeyboardButton(dish["name"], callback_data=f"view_dish:{dish['id']}")])
    keyboard = InlineKeyboardMarkup(buttons) if buttons else None
    await message.reply_text("–¢–µ–∫—É—â–∏–µ –±–ª—é–¥–∞:\n" + dish_names, reply_markup=keyboard)


async def view_dish_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if not context.args:
        await update.message.reply_text("–£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –±–ª—é–¥–∞ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã, –Ω–∞–ø—Ä–∏–º–µ—Ä: /view –ë–æ—Ä—â")
        return
    name = " ".join(context.args)
    dish = await database.get_dish_by_name(name)
    if not dish:
        suggestions = await database.search_dish_names(name, limit=3)
        if suggestions:
            names = ", ".join(item["name"] for item in suggestions)
            await update.message.reply_text(f"–ë–ª—é–¥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –í–æ–∑–º–æ–∂–Ω–æ, –≤—ã –∏—Å–∫–∞–ª–∏: {names}")
        else:
            await update.message.reply_text("–ë–ª—é–¥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –î–æ–±–∞–≤—å—Ç–µ –µ–≥–æ –≤ –º–µ–Ω—é.")
        return
    await update.message.reply_text(format_dish_card(dish))


async def view_dish_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer()
    dish_id = int(query.data.split(":", 1)[1])
    dish = await database.get_dish_by_id(dish_id)
    if not dish:
        await query.edit_message_text("–ë–ª—é–¥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ –±—ã–ª–æ —É–¥–∞–ª–µ–Ω–æ.")
        return
    keyboard = InlineKeyboardMarkup(
        [
            [
                InlineKeyboardButton(
                    "‚òÖ –£–±—Ä–∞—Ç—å –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ" if dish.get("is_favorite") else "‚≠êÔ∏è –í –∏–∑–±—Ä–∞–Ω–Ω–æ–µ",
                    callback_data=f"toggle_favorite:{dish_id}",
                ),
                InlineKeyboardButton("üóì –í –ø–ª–∞–Ω", callback_data=f"plan_from_dish:{dish_id}"),
            ],
            [
                InlineKeyboardButton("üìè –ú–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"scale_dish:{dish_id}"),
                InlineKeyboardButton("üìÑ –≠–∫—Å–ø–æ—Ä—Ç –±–ª—é–¥–∞", callback_data=f"export_dish:{dish_id}"),
            ],
            [
                InlineKeyboardButton("üì§ –ü–æ–¥–µ–ª–∏—Ç—å—Å—è", callback_data=f"share_dish:{dish_id}"),
            ],
        ]
    )
    await query.message.reply_text(format_dish_card(dish), reply_markup=keyboard)


async def toggle_favorite_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer()
    dish_id = int(query.data.split(":", 1)[1])
    dish = await database.get_dish_by_id(dish_id)
    if not dish:
        await query.message.reply_text("–ë–ª—é–¥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        return
    new_value = not bool(dish.get("is_favorite"))
    await database.toggle_favorite(dish_id, new_value)
    await database.log_action(str(update.effective_user.id), dish_id, "favorites_updated", {"is_favorite": new_value})
    text = "–î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ" if new_value else "–£–¥–∞–ª–µ–Ω–æ –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ"
    await query.message.reply_text(text)


async def share_dish_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer()
    dish_id = int(query.data.split(":", 1)[1])
    dish = await database.get_dish_by_id(dish_id)
    if not dish:
        await query.message.reply_text("–ë–ª—é–¥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏.")
        return
    await query.message.reply_text("–°–∫–æ–ø–∏—Ä—É–π—Ç–µ —Ç–µ–∫—Å—Ç –∏ –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å –∏–º:\n\n" + format_shareable_recipe(dish))


async def export_dish_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer()
    dish_id = int(query.data.split(":", 1)[1])
    dish = await database.get_dish_by_id(dish_id)
    if not dish:
        await query.message.reply_text("–ë–ª—é–¥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞.")
        return
    buffer = io.BytesIO()
    buffer.write(format_shareable_recipe(dish).encode("utf-8"))
    buffer.seek(0)
    filename = f"{dish['name']}.txt".replace("/", "-")
    await query.message.reply_document(InputFile(buffer, filename=filename), caption="–ö–∞—Ä—Ç–æ—á–∫–∞ –±–ª—é–¥–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Å–∫–∞—á–∏–≤–∞–Ω–∏—é.")


async def show_favorites(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    favorites = await database.list_favorites()
    message = update.effective_message
    if not favorites:
        await message.reply_text("–ò–∑–±—Ä–∞–Ω–Ω—ã—Ö –±–ª—é–¥ –ø–æ–∫–∞ –Ω–µ—Ç. –î–æ–±–∞–≤—å—Ç–µ –∏—Ö –∏–∑ –∫–∞—Ä—Ç–æ—á–∫–∏ –±–ª—é–¥–∞ –∫–Ω–æ–ø–∫–æ–π '‚≠êÔ∏è'.")
        return
    lines = ["–ò–∑–±—Ä–∞–Ω–Ω—ã–µ –±–ª—é–¥–∞:"]
    for dish in favorites:
        lines.append(f"‚Ä¢ {dish['name']}")
    keyboard = InlineKeyboardMarkup(
        [[InlineKeyboardButton(dish["name"], callback_data=f"view_dish:{dish['id']}")] for dish in favorites[:30]]
    )
    await message.reply_text("\n".join(lines), reply_markup=keyboard)


async def plan_overview(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_id = str(update.effective_user.id)
    start_date, end_date = calculate_date_range(7)
    plans = await database.get_meal_plans_in_range(user_id, start_date, end_date)
    keyboard = InlineKeyboardMarkup([[InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –±–ª—é–¥–æ", callback_data="plan_create")]])
    await update.effective_message.reply_text(
        format_plan_entries(plans) + f"\n\n–ü–æ–∫–∞–∑—ã–≤–∞—é—Ç—Å—è –ø–ª–∞–Ω—ã –Ω–∞ –ø–µ—Ä–∏–æ–¥ {start_date} ‚Äî {end_date}.",
        reply_markup=keyboard,
    )


async def shopping_list_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_id = str(update.effective_user.id)
    start_date, end_date = calculate_date_range(7)
    result = await database.get_shopping_list(user_id, start_date, end_date)
    await update.effective_message.reply_text(
        format_shopping_items(result.get("items", []))
        + f"\n\n–î–∏–∞–ø–∞–∑–æ–Ω: {start_date} ‚Äî {end_date}",
    )
    await database.log_action(user_id, None, "shopping_viewed", {"items": len(result.get("items", []))})


async def statistics_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_id = str(update.effective_user.id)
    stats = await database.get_user_statistics(user_id)
    recent = await database.get_recent_actions(user_id)
    await update.effective_message.reply_text(format_statistics(stats, recent))
    await database.log_action(user_id, None, "statistics_viewed", None)


async def export_all_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_id = str(update.effective_user.id)
    data = await database.export_data(user_id)
    buffer = io.BytesIO()
    with zipfile.ZipFile(buffer, "w", zipfile.ZIP_DEFLATED) as archive:
        for filename, content in data.items():
            archive.writestr(filename, content)
    buffer.seek(0)
    await update.effective_message.reply_document(
        InputFile(buffer, filename="menu_export.zip"),
        caption="–≠–∫—Å–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à—ë–Ω.",
    )


async def schedule_existing_reminders(application: Application) -> None:
    reminders = await database.get_pending_reminders()
    now = datetime.now()
    for reminder in reminders:
        try:
            remind_at = datetime.fromisoformat(reminder["remind_at"])
        except ValueError:
            continue
        delta = remind_at - now
        when = max(delta, timedelta(seconds=1))
        job = application.job_queue.run_once(
            send_reminder_job,
            when=when,
            name=reminder.get("job_name"),
            data={
                "chat_id": reminder["chat_id"],
                "message": reminder["message"],
                "reminder_time": reminder["remind_at"],
                "reminder_id": reminder["id"],
                "plan_id": reminder.get("plan_id"),
                "dish_id": reminder.get("dish_id"),
                "user_id": reminder.get("user_id"),
            },
        )
        if job and job.data is not None:
            job.data["reminder_id"] = reminder["id"]


async def post_init(application: Application) -> None:
    await schedule_existing_reminders(application)


def register_handlers(app: Application) -> None:
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("help", help_command))
    app.add_handler(CommandHandler("menu", list_dishes))
    app.add_handler(CommandHandler("view", view_dish_command))
    app.add_handler(CommandHandler("favorites", show_favorites))
    app.add_handler(CommandHandler("shopping", shopping_list_handler))
    app.add_handler(CommandHandler("stats", statistics_handler))
    app.add_handler(CommandHandler("export", export_all_handler))

    app.add_handler(add_dish_handler)
    app.add_handler(add_details_handler)
    app.add_handler(edit_dish_handler)
    app.add_handler(delete_dish_handler)
    app.add_handler(plan_handler)
    app.add_handler(import_handler)
    app.add_handler(find_by_ingredients_handler)
    app.add_handler(scale_dish_handler)

    app.add_handler(MessageHandler(filters.Regex("^(–ú–µ–Ω—é)$"), list_dishes))
    app.add_handler(MessageHandler(filters.Regex("^(–ò–∑–±—Ä–∞–Ω–Ω–æ–µ)$"), show_favorites))
    app.add_handler(MessageHandler(filters.Regex("^(–°–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫)$"), shopping_list_handler))
    app.add_handler(MessageHandler(filters.Regex("^(–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞)$"), statistics_handler))
    app.add_handler(MessageHandler(filters.Regex("^(–≠–∫—Å–ø–æ—Ä—Ç)$"), export_all_handler))
    app.add_handler(MessageHandler(filters.Regex("^(–ü–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è)$"), plan_overview))
    app.add_handler(MessageHandler(filters.Regex("^(–ü–æ–º–æ—â—å)$"), help_command))

    app.add_handler(CallbackQueryHandler(view_dish_callback, pattern="^view_dish:"))
    app.add_handler(CallbackQueryHandler(toggle_favorite_callback, pattern="^toggle_favorite:"))
    app.add_handler(CallbackQueryHandler(export_dish_callback, pattern="^export_dish:"))
    app.add_handler(CallbackQueryHandler(share_dish_callback, pattern="^share_dish:"))

    app.post_init = post_init

